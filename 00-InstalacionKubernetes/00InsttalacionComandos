#https://www.linuxtechi.com/install-kubernetes-on-ubuntu-22-04/
#usernames workers y master
$sudo apt install net-tools
$ifconfig
$sudo hostnamectl set-hostname "master.congresofoss.net"
#$sudo hostnamectl set-hostname "main.congresofoss.net"

#En los nodos aplicar 
$sudo hostnamectl set-hostname "worker1.congresofoss.net"
$sudo hostnamectl set-hostname "worker2.congresofoss.net"

$sudo vi /etc/hosts
192.168.122.19   main.congresofoss.net master
192.168.122.30   worker1.congresofoss.net worker1
192.168.122.31   worker2.congresofoss.net worker2


#10.1.0.7   main.congresofoss.net main
#10.1.0.8   node1.congresofoss.net node1
#10.1.0.9   node2.congresofoss.net node2

#Se quita el swap
$sudo swapoff -a
$sudo sed -i '/ swap / s/^\(.*\)$/#\1/g' /etc/fstab


#Se cargan modulos
$sudo tee /etc/modules-load.d/containerd.conf <<EOF
overlay
br_netfilter
EOF

$sudo modprobe overlay
$sudo modprobe br_netfilter


$sudo tee /etc/sysctl.d/kubernetes.conf <<EOF
net.bridge.bridge-nf-call-ip6tables = 1
net.bridge.bridge-nf-call-iptables = 1
net.ipv4.ip_forward = 1
EOF


$sudo sysctl --system
#Se habilita certificado
$sudo apt install -y curl gnupg2 software-properties-common apt-transport-https ca-certificates
#Se habilita repositorio docker
$sudo curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo gpg --dearmour -o /etc/apt/trusted.gpg.d/docker.gpg
$sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu $(lsb_release -cs) stable"
$sudo apt upgrade
$sudo apt update
$sudo apt install -y containerd.io
$containerd config default | sudo tee /etc/containerd/config.toml >/dev/null 2>&1
$sudo sed -i 's/SystemdCgroup \= false/SystemdCgroup \= true/g' /etc/containerd/config.toml
$sudo systemctl restart containerd
$sudo systemctl enable containerd

#Se habilitan repositorios de kubernetes
$curl -s https://packages.cloud.google.com/apt/doc/apt-key.gpg | sudo apt-key add -
$sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-xenial main"
$sudo apt-add-repository "deb http://apt.kubernetes.io/ kubernetes-jammy main"


#Se instala el kubernetes
$sudo apt update
$sudo apt install -y kubelet kubeadm kubectl
$sudo apt-mark hold kubelet kubeadm kubectl


#Se agrega un master node
$sudo kubeadm init --control-plane-endpoint=master.congresofoss.net




#salida para unir nodos


#Your Kubernetes control-plane has initialized successfully!

#To start using your cluster, you need to run the following as a regular user:

  mkdir -p $HOME/.kube
  sudo cp -i /etc/kubernetes/admin.conf $HOME/.kube/config
  sudo chown $(id -u):$(id -g) $HOME/.kube/config

#Alternatively, if you are the root user, you can run:

  export KUBECONFIG=/etc/kubernetes/admin.conf

#You should now deploy a pod network to the cluster.
#Run "kubectl apply -f [podnetwork].yaml" with one of the options listed at:
#  https://kubernetes.io/docs/concepts/cluster-administration/addons/

#You can now join any number of control-plane nodes by copying certificate authorities
#and service account keys on each node and then running the following as root:

  kubeadm join master.congresofoss.net:6443 --token 6h3x0j.zn9y5ukyi3ri8c7b \
        --discovery-token-ca-cert-hash sha256:047482a373b84ae655d3780d894fa3e207cd72ab5aa3364e75bad661dd010bbc \
        --control-plane

#Then you can join any number of worker nodes by running the following on each as root:

kubeadm join master.congresofoss.net:6443 --token 6h3x0j.zn9y5ukyi3ri8c7b \
        --discovery-token-ca-cert-hash sha256:047482a373b84ae655d3780d894fa3e207cd72ab5aa3364e75bad661dd010bbc


#Este es una salida que puede variar dependiendo del cluster
$kubeadm join master.congresofoss.net:6443 --token 6h3x0j.zn9y5ukyi3ri8c7b \
        --discovery-token-ca-cert-hash sha256:047482a373b84ae655d3780d894fa3e207cd72ab5aa3364e75bad661dd010bbc


#Instalar calico
kubectl apply -f https://raw.githubusercontent.com/projectcalico/calico/v3.25.0/manifests/calico.yaml

